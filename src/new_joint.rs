use crate::JointKind::Outward;
use crate::JointSide::Top;
use crate::{Joint, JointKind, JointPosition, JointSide};
use ratatui::buffer::Buffer;
use ratatui::layout::{Position, Rect};
use ratatui::widgets::BorderType;
use ratatui::widgets::BorderType::{QuadrantInside, QuadrantOutside};

pub fn render_joint(joint: &Joint, area: Rect, buf: &mut Buffer) {
    // normalize before finding the glyph
    let joint = joint.normalized(area);

    if let Some(pos) = joint.locate(area) {
        let sym = match joint.own_border {
            BorderType::Plain => plain_joint(joint),
            BorderType::Rounded => plain_joint(joint),
            BorderType::Double => double_joint(joint),
            BorderType::Thick => thick_joint(joint),
            BorderType::QuadrantInside => quadrant_inside_joint(joint),
            BorderType::QuadrantOutside => "X",
        };

        match joint.side {
            JointSide::Top => {
                if let Some(cell) = buf.cell_mut(Position::new(area.left() + pos, area.top())) {
                    cell.set_symbol(sym);
                }
            }
            JointSide::Right => {
                if let Some(cell) = buf.cell_mut(Position::new(
                    area.right().saturating_sub(1),
                    area.top() + pos,
                )) {
                    cell.set_symbol(sym);
                }
            }
            JointSide::Bottom => {
                if let Some(cell) = buf.cell_mut(Position::new(
                    area.left() + pos,
                    area.bottom().saturating_sub(1),
                )) {
                    cell.set_symbol(sym);
                }
            }
            JointSide::Left => {
                if let Some(cell) = buf.cell_mut(Position::new(area.left(), area.top() + pos)) {
                    cell.set_symbol(sym);
                }
            }
        }
    }
}

fn plain_joint(joint: Joint) -> &'static str {
    use BorderType::*;
    use JointKind::*;
    use JointPosition::*;
    use JointSide::*;

    match (joint.kind, joint.side, joint.pos, joint.other_border) {
        (Outward, Top, CrossStart(_), Plain) => "┼",
        (Outward, Top, CrossStart(_), Rounded) => "┼",
        (Outward, Top, CrossStart(_), Double) => "┼",
        (Outward, Top, CrossStart(Thick), Thick) => "╃",
        (Outward, Top, CrossStart(_), Thick) => "╀",
        (Outward, Top, CrossStart(Thick), _) => "┽",
        (Outward, Top, CrossStart(_), _) => "┼",
        (Outward, Top, ProlongStart, Plain) => "┬",
        (Outward, Top, ProlongStart, Rounded) => "┬",
        (Outward, Top, ProlongStart, Double) => "┬",
        (Outward, Top, ProlongStart, Thick) => "┭",
        (Outward, Top, ProlongStart, _) => "┬",
        (Outward, Top, Start, Plain) => "├",
        (Outward, Top, Start, Rounded) => "├",
        (Outward, Top, Start, Double) => "├",
        (Outward, Top, Start, Thick) => "┞",
        (Outward, Top, Start, _) => "├",
        (Outward, Top, Pos(_), Plain) => "┴",
        (Outward, Top, Pos(_), Rounded) => "┴",
        (Outward, Top, Pos(_), Double) => "╨",
        (Outward, Top, Pos(_), Thick) => "┸",
        (Outward, Top, Pos(_), _) => "┴",
        (Outward, Top, End, Plain) => "┤",
        (Outward, Top, End, Rounded) => "┤",
        (Outward, Top, End, Double) => "┤",
        (Outward, Top, End, Thick) => "┦",
        (Outward, Top, End, _) => "┤",
        (Outward, Top, ProlongEnd, Plain) => "┬",
        (Outward, Top, ProlongEnd, Rounded) => "┬",
        (Outward, Top, ProlongEnd, Double) => "┬",
        (Outward, Top, ProlongEnd, Thick) => "┮",
        (Outward, Top, ProlongEnd, _) => "┬",
        (Outward, Top, CrossEnd(_), Plain) => "┼",
        (Outward, Top, CrossEnd(_), Rounded) => "┼",
        (Outward, Top, CrossEnd(_), Double) => "┼",
        (Outward, Top, CrossEnd(Thick), Thick) => "╄",
        (Outward, Top, CrossEnd(_), Thick) => "╀",
        (Outward, Top, CrossEnd(Thick), _) => "┾",
        (Outward, Top, CrossEnd(_), _) => "┼",

        (Outward, Right, CrossStart(_), Plain) => "┼",
        (Outward, Right, CrossStart(_), Rounded) => "┼",
        (Outward, Right, CrossStart(_), Double) => "┼",
        (Outward, Right, CrossStart(Thick), Thick) => "╄",
        (Outward, Right, CrossStart(_), Thick) => "╀",
        (Outward, Right, CrossStart(Thick), _) => "┾",
        (Outward, Right, CrossStart(_), _) => "┼",
        (Outward, Right, ProlongStart, Plain) => "┤",
        (Outward, Right, ProlongStart, Rounded) => "┤",
        (Outward, Right, ProlongStart, Double) => "┤",
        (Outward, Right, ProlongStart, Thick) => "┦",
        (Outward, Right, ProlongStart, _) => "┤",
        (Outward, Right, Start, Plain) => "┬",
        (Outward, Right, Start, Rounded) => "┬",
        (Outward, Right, Start, Double) => "┬",
        (Outward, Right, Start, Thick) => "┮",
        (Outward, Right, Start, _) => "┬",
        (Outward, Right, Pos(_), Plain) => "├",
        (Outward, Right, Pos(_), Rounded) => "├",
        (Outward, Right, Pos(_), Double) => "╞",
        (Outward, Right, Pos(_), Thick) => "┝",
        (Outward, Right, Pos(_), _) => "├",
        (Outward, Right, End, Plain) => "┴",
        (Outward, Right, End, Rounded) => "┴",
        (Outward, Right, End, Double) => "┴",
        (Outward, Right, End, Thick) => "┶",
        (Outward, Right, End, _) => "┴",
        (Outward, Right, ProlongEnd, Plain) => "┤",
        (Outward, Right, ProlongEnd, Rounded) => "┤",
        (Outward, Right, ProlongEnd, Double) => "┤",
        (Outward, Right, ProlongEnd, Thick) => "┧",
        (Outward, Right, ProlongEnd, _) => "┤",
        (Outward, Right, CrossEnd(_), Plain) => "┼",
        (Outward, Right, CrossEnd(_), Rounded) => "┼",
        (Outward, Right, CrossEnd(_), Double) => "┼",
        (Outward, Right, CrossEnd(Thick), Thick) => "╆",
        (Outward, Right, CrossEnd(_), Thick) => "┾",
        (Outward, Right, CrossEnd(Thick), _) => "╁",
        (Outward, Right, CrossEnd(_), _) => "┼",

        (Outward, Bottom, CrossStart(_), Plain) => "┼",
        (Outward, Bottom, CrossStart(_), Rounded) => "┼",
        (Outward, Bottom, CrossStart(_), Double) => "┼",
        (Outward, Bottom, CrossStart(Thick), Thick) => "╅",
        (Outward, Bottom, CrossStart(_), Thick) => "╁",
        (Outward, Bottom, CrossStart(Thick), _) => "┽",
        (Outward, Bottom, CrossStart(_), _) => "┼",
        (Outward, Bottom, ProlongStart, Plain) => "┴",
        (Outward, Bottom, ProlongStart, Rounded) => "┴",
        (Outward, Bottom, ProlongStart, Double) => "┴",
        (Outward, Bottom, ProlongStart, Thick) => "┵",
        (Outward, Bottom, ProlongStart, _) => "┴",
        (Outward, Bottom, Start, Plain) => "├",
        (Outward, Bottom, Start, Rounded) => "├",
        (Outward, Bottom, Start, Double) => "├",
        (Outward, Bottom, Start, Thick) => "┟",
        (Outward, Bottom, Start, _) => "├",
        (Outward, Bottom, Pos(_), Plain) => "┬",
        (Outward, Bottom, Pos(_), Rounded) => "┬",
        (Outward, Bottom, Pos(_), Double) => "╥",
        (Outward, Bottom, Pos(_), Thick) => "┰",
        (Outward, Bottom, Pos(_), _) => "┬",
        (Outward, Bottom, End, Plain) => "┤",
        (Outward, Bottom, End, Rounded) => "┤",
        (Outward, Bottom, End, Double) => "┤",
        (Outward, Bottom, End, Thick) => "┧",
        (Outward, Bottom, End, _) => "┤",
        (Outward, Bottom, ProlongEnd, Plain) => "┴",
        (Outward, Bottom, ProlongEnd, Rounded) => "┴",
        (Outward, Bottom, ProlongEnd, Double) => "┴",
        (Outward, Bottom, ProlongEnd, Thick) => "┶",
        (Outward, Bottom, ProlongEnd, _) => "┴",
        (Outward, Bottom, CrossEnd(_), Plain) => "┼",
        (Outward, Bottom, CrossEnd(_), Rounded) => "┼",
        (Outward, Bottom, CrossEnd(_), Double) => "┼",
        (Outward, Bottom, CrossEnd(Thick), Thick) => "╆",
        (Outward, Bottom, CrossEnd(_), Thick) => "┾",
        (Outward, Bottom, CrossEnd(Thick), _) => "╁",
        (Outward, Bottom, CrossEnd(_), _) => "┼",

        (Outward, Left, CrossStart(_), Plain) => "┼",
        (Outward, Left, CrossStart(_), Rounded) => "┼",
        (Outward, Left, CrossStart(_), Double) => "┼",
        (Outward, Left, CrossStart(Thick), Thick) => "╃",
        (Outward, Left, CrossStart(_), Thick) => "┽",
        (Outward, Left, CrossStart(Thick), _) => "╀",
        (Outward, Left, CrossStart(_), _) => "┼",
        (Outward, Left, ProlongStart, Plain) => "├",
        (Outward, Left, ProlongStart, Rounded) => "├",
        (Outward, Left, ProlongStart, Double) => "├",
        (Outward, Left, ProlongStart, Thick) => "┞",
        (Outward, Left, ProlongStart, _) => "├",
        (Outward, Left, Start, Plain) => "┬",
        (Outward, Left, Start, Rounded) => "┬",
        (Outward, Left, Start, Double) => "┬",
        (Outward, Left, Start, Thick) => "┭",
        (Outward, Left, Start, _) => "┬",
        (Outward, Left, Pos(_), Plain) => "┤",
        (Outward, Left, Pos(_), Rounded) => "┤",
        (Outward, Left, Pos(_), Double) => "╡",
        (Outward, Left, Pos(_), Thick) => "┥",
        (Outward, Left, Pos(_), _) => "┤",
        (Outward, Left, End, Plain) => "┴",
        (Outward, Left, End, Rounded) => "┴",
        (Outward, Left, End, Double) => "┴",
        (Outward, Left, End, Thick) => "┵",
        (Outward, Left, End, _) => "┴",
        (Outward, Left, ProlongEnd, Plain) => "├",
        (Outward, Left, ProlongEnd, Rounded) => "├",
        (Outward, Left, ProlongEnd, Double) => "├",
        (Outward, Left, ProlongEnd, Thick) => "┟",
        (Outward, Left, ProlongEnd, _) => "├",
        (Outward, Left, CrossEnd(_), Plain) => "┼",
        (Outward, Left, CrossEnd(_), Rounded) => "┼",
        (Outward, Left, CrossEnd(_), Double) => "┼",
        (Outward, Left, CrossEnd(Thick), Thick) => "╅",
        (Outward, Left, CrossEnd(_), Thick) => "┽",
        (Outward, Left, CrossEnd(Thick), _) => "╁",
        (Outward, Left, CrossEnd(_), _) => "┼",

        // -------------------------------------------------
        (Inward, Top, CrossStart(_), _) => "┌",
        (Inward, Top, ProlongStart, _) => "┌",
        (Inward, Top, Start, _) => "┌",
        (Inward, Top, Pos(_), Plain) => "┬",
        (Inward, Top, Pos(_), Rounded) => "┬",
        (Inward, Top, Pos(_), Double) => "╥",
        (Inward, Top, Pos(_), Thick) => "┰",
        (Inward, Top, Pos(_), _) => "┬",
        (Inward, Top, End, _) => "┐",
        (Inward, Top, ProlongEnd, _) => "┐",
        (Inward, Top, CrossEnd(_), _) => "┐",

        (Inward, Right, CrossStart(_), _) => "┐",
        (Inward, Right, ProlongStart, _) => "┐",
        (Inward, Right, Start, _) => "┐",
        (Inward, Right, Pos(_), Plain) => "┤",
        (Inward, Right, Pos(_), Rounded) => "┤",
        (Inward, Right, Pos(_), Double) => "╡",
        (Inward, Right, Pos(_), Thick) => "┥",
        (Inward, Right, Pos(_), _) => "┤",
        (Inward, Right, End, _) => "┘",
        (Inward, Right, ProlongEnd, _) => "┘",
        (Inward, Right, CrossEnd(_), _) => "┘",

        (Inward, Bottom, CrossStart(_), _) => "└",
        (Inward, Bottom, ProlongStart, _) => "└",
        (Inward, Bottom, Start, _) => "└",
        (Inward, Bottom, Pos(_), Plain) => "┴",
        (Inward, Bottom, Pos(_), Rounded) => "┴",
        (Inward, Bottom, Pos(_), Double) => "╨",
        (Inward, Bottom, Pos(_), Thick) => "┸",
        (Inward, Bottom, Pos(_), _) => "┘",
        (Inward, Bottom, End, _) => "┘",
        (Inward, Bottom, ProlongEnd, _) => "┘",
        (Inward, Bottom, CrossEnd(_), _) => "┘",

        (Inward, Left, CrossStart(_), _) => "┌",
        (Inward, Left, ProlongStart, _) => "┌",
        (Inward, Left, Start, _) => "┌",
        (Inward, Left, Pos(_), Plain) => "├",
        (Inward, Left, Pos(_), Rounded) => "├",
        (Inward, Left, Pos(_), Double) => "╞",
        (Inward, Left, Pos(_), Thick) => "┝",
        (Inward, Left, Pos(_), _) => "├",
        (Inward, Left, End, _) => "└",
        (Inward, Left, ProlongEnd, _) => "└",
        (Inward, Left, CrossEnd(_), _) => "└",

        // ----------------------------------------------
        (Through, Top, CrossStart(_), Plain) => "┼",
        (Through, Top, CrossStart(_), Rounded) => "┼",
        (Through, Top, CrossStart(_), Double) => "┼",
        (Through, Top, CrossStart(Thick), Thick) => "╃",
        (Through, Top, CrossStart(_), Thick) => "╀",
        (Through, Top, CrossStart(Thick), _) => "┽",
        (Through, Top, CrossStart(_), _) => "┼",
        (Through, Top, ProlongStart, Plain) => "┬",
        (Through, Top, ProlongStart, Rounded) => "┬",
        (Through, Top, ProlongStart, Double) => "┬",
        (Through, Top, ProlongStart, Thick) => "┭",
        (Through, Top, ProlongStart, _) => "┬",
        (Through, Top, Start, Plain) => "├",
        (Through, Top, Start, Rounded) => "├",
        (Through, Top, Start, Double) => "├",
        (Through, Top, Start, Thick) => "┞",
        (Through, Top, Start, _) => "├",
        (Through, Top, Pos(_), Plain) => "┼",
        (Through, Top, Pos(_), Rounded) => "┼",
        (Through, Top, Pos(_), Double) => "╫",
        (Through, Top, Pos(_), Thick) => "╂",
        (Through, Top, Pos(_), _) => "┼",
        (Through, Top, End, Plain) => "┤",
        (Through, Top, End, Rounded) => "┤",
        (Through, Top, End, Double) => "┤",
        (Through, Top, End, Thick) => "┦",
        (Through, Top, End, _) => "┤",
        (Through, Top, ProlongEnd, Plain) => "┬",
        (Through, Top, ProlongEnd, Rounded) => "┬",
        (Through, Top, ProlongEnd, Double) => "┬",
        (Through, Top, ProlongEnd, Thick) => "┮",
        (Through, Top, ProlongEnd, _) => "┬",
        (Through, Top, CrossEnd(_), Plain) => "┼",
        (Through, Top, CrossEnd(_), Rounded) => "┼",
        (Through, Top, CrossEnd(_), Double) => "┼",
        (Through, Top, CrossEnd(Thick), Thick) => "╄",
        (Through, Top, CrossEnd(_), Thick) => "╀",
        (Through, Top, CrossEnd(Thick), _) => "┾",
        (Through, Top, CrossEnd(_), _) => "┼",

        (Through, Right, CrossStart(_), Plain) => "┼",
        (Through, Right, CrossStart(_), Rounded) => "┼",
        (Through, Right, CrossStart(_), Double) => "┼",
        (Through, Right, CrossStart(Thick), Thick) => "╄",
        (Through, Right, CrossStart(_), Thick) => "╀",
        (Through, Right, CrossStart(Thick), _) => "┾",
        (Through, Right, CrossStart(_), _) => "┼",
        (Through, Right, ProlongStart, Plain) => "┤",
        (Through, Right, ProlongStart, Rounded) => "┤",
        (Through, Right, ProlongStart, Double) => "┤",
        (Through, Right, ProlongStart, Thick) => "┦",
        (Through, Right, ProlongStart, _) => "┤",
        (Through, Right, Start, Plain) => "┬",
        (Through, Right, Start, Rounded) => "┬",
        (Through, Right, Start, Double) => "┬",
        (Through, Right, Start, Thick) => "┮",
        (Through, Right, Start, _) => "┬",
        (Through, Right, Pos(_), Plain) => "┼",
        (Through, Right, Pos(_), Rounded) => "┼",
        (Through, Right, Pos(_), Double) => "╪",
        (Through, Right, Pos(_), Thick) => "┿",
        (Through, Right, Pos(_), _) => "┼",
        (Through, Right, End, Plain) => "┴",
        (Through, Right, End, Rounded) => "┴",
        (Through, Right, End, Double) => "┴",
        (Through, Right, End, Thick) => "┶",
        (Through, Right, End, _) => "┴",
        (Through, Right, ProlongEnd, Plain) => "┤",
        (Through, Right, ProlongEnd, Rounded) => "┤",
        (Through, Right, ProlongEnd, Double) => "┤",
        (Through, Right, ProlongEnd, Thick) => "┧",
        (Through, Right, ProlongEnd, _) => "┤",
        (Through, Right, CrossEnd(_), Plain) => "┼",
        (Through, Right, CrossEnd(_), Rounded) => "┼",
        (Through, Right, CrossEnd(_), Double) => "┼",
        (Through, Right, CrossEnd(Thick), Thick) => "╆",
        (Through, Right, CrossEnd(_), Thick) => "┾",
        (Through, Right, CrossEnd(Thick), _) => "╁",
        (Through, Right, CrossEnd(_), _) => "┼",

        (Through, Bottom, CrossStart(_), Plain) => "┼",
        (Through, Bottom, CrossStart(_), Rounded) => "┼",
        (Through, Bottom, CrossStart(_), Double) => "┼",
        (Through, Bottom, CrossStart(Thick), Thick) => "╅",
        (Through, Bottom, CrossStart(_), Thick) => "╁",
        (Through, Bottom, CrossStart(Thick), _) => "┽",
        (Through, Bottom, CrossStart(_), _) => "┼",
        (Through, Bottom, ProlongStart, Plain) => "┴",
        (Through, Bottom, ProlongStart, Rounded) => "┴",
        (Through, Bottom, ProlongStart, Double) => "┴",
        (Through, Bottom, ProlongStart, Thick) => "┵",
        (Through, Bottom, ProlongStart, _) => "┴",
        (Through, Bottom, Start, Plain) => "├",
        (Through, Bottom, Start, Rounded) => "├",
        (Through, Bottom, Start, Double) => "├",
        (Through, Bottom, Start, Thick) => "┟",
        (Through, Bottom, Start, _) => "├",
        (Through, Bottom, Pos(_), Plain) => "┼",
        (Through, Bottom, Pos(_), Rounded) => "┼",
        (Through, Bottom, Pos(_), Double) => "╫",
        (Through, Bottom, Pos(_), Thick) => "╂",
        (Through, Bottom, Pos(_), _) => "┼",
        (Through, Bottom, End, Plain) => "┤",
        (Through, Bottom, End, Rounded) => "┤",
        (Through, Bottom, End, Double) => "┤",
        (Through, Bottom, End, Thick) => "┧",
        (Through, Bottom, End, _) => "┤",
        (Through, Bottom, ProlongEnd, Plain) => "┴",
        (Through, Bottom, ProlongEnd, Rounded) => "┴",
        (Through, Bottom, ProlongEnd, Double) => "┴",
        (Through, Bottom, ProlongEnd, Thick) => "┶",
        (Through, Bottom, ProlongEnd, _) => "┴",
        (Through, Bottom, CrossEnd(_), Plain) => "┼",
        (Through, Bottom, CrossEnd(_), Rounded) => "┼",
        (Through, Bottom, CrossEnd(_), Double) => "┼",
        (Through, Bottom, CrossEnd(Thick), Thick) => "╆",
        (Through, Bottom, CrossEnd(_), Thick) => "┾",
        (Through, Bottom, CrossEnd(Thick), _) => "╁",
        (Through, Bottom, CrossEnd(_), _) => "┼",

        (Through, Left, CrossStart(_), Plain) => "┼",
        (Through, Left, CrossStart(_), Rounded) => "┼",
        (Through, Left, CrossStart(_), Double) => "┼",
        (Through, Left, CrossStart(Thick), Thick) => "╃",
        (Through, Left, CrossStart(_), Thick) => "┽",
        (Through, Left, CrossStart(Thick), _) => "╀",
        (Through, Left, CrossStart(_), _) => "┼",
        (Through, Left, ProlongStart, Plain) => "├",
        (Through, Left, ProlongStart, Rounded) => "├",
        (Through, Left, ProlongStart, Double) => "├",
        (Through, Left, ProlongStart, Thick) => "┞",
        (Through, Left, ProlongStart, _) => "├",
        (Through, Left, Start, Plain) => "┬",
        (Through, Left, Start, Rounded) => "┬",
        (Through, Left, Start, Double) => "┬",
        (Through, Left, Start, Thick) => "┭",
        (Through, Left, Start, _) => "┬",
        (Through, Left, Pos(_), Plain) => "┼",
        (Through, Left, Pos(_), Rounded) => "┼",
        (Through, Left, Pos(_), Double) => "╪",
        (Through, Left, Pos(_), Thick) => "┿",
        (Through, Left, Pos(_), _) => "┼",
        (Through, Left, End, Plain) => "┴",
        (Through, Left, End, Rounded) => "┴",
        (Through, Left, End, Double) => "┴",
        (Through, Left, End, Thick) => "┵",
        (Through, Left, End, _) => "┴",
        (Through, Left, ProlongEnd, Plain) => "├",
        (Through, Left, ProlongEnd, Rounded) => "├",
        (Through, Left, ProlongEnd, Double) => "├",
        (Through, Left, ProlongEnd, Thick) => "┟",
        (Through, Left, ProlongEnd, _) => "├",
        (Through, Left, CrossEnd(_), Plain) => "┼",
        (Through, Left, CrossEnd(_), Rounded) => "┼",
        (Through, Left, CrossEnd(_), Double) => "┼",
        (Through, Left, CrossEnd(Thick), Thick) => "╅",
        (Through, Left, CrossEnd(_), Thick) => "┽",
        (Through, Left, CrossEnd(Thick), _) => "╁",
        (Through, Left, CrossEnd(_), _) => "┼",

        (Manual(cc), _, _, _) => cc,
    }
}

fn double_joint(joint: Joint) -> &'static str {
    use BorderType::*;
    use JointKind::*;
    use JointPosition::*;
    use JointSide::*;

    match (joint.kind, joint.side, joint.pos, joint.other_border) {
        (Outward, Top, CrossStart(_), _) => "╬",
        (Outward, Top, ProlongStart, _) => "╦",
        (Outward, Top, Start, _) => "╠",
        (Outward, Top, Pos(_), Plain) => "╧",
        (Outward, Top, Pos(_), Rounded) => "╧",
        (Outward, Top, Pos(_), Double) => "╩",
        (Outward, Top, Pos(_), Thick) => "╩",
        (Outward, Top, Pos(_), _) => "╩",
        (Outward, Top, End, _) => "╣",
        (Outward, Top, ProlongEnd, _) => "╦",
        (Outward, Top, CrossEnd(_), _) => "╬",

        (Outward, Right, CrossStart(_), _) => "╬",
        (Outward, Right, ProlongStart, _) => "╣",
        (Outward, Right, Start, _) => "╦",
        (Outward, Right, Pos(_), Plain) => "╟",
        (Outward, Right, Pos(_), Rounded) => "╟",
        (Outward, Right, Pos(_), Double) => "╠",
        (Outward, Right, Pos(_), Thick) => "╠",
        (Outward, Right, Pos(_), _) => "╟",
        (Outward, Right, End, _) => "╩",
        (Outward, Right, ProlongEnd, _) => "╣",
        (Outward, Right, CrossEnd(_), _) => "╬",

        (Outward, Bottom, CrossStart(_), _) => "╬",
        (Outward, Bottom, ProlongStart, _) => "╩",
        (Outward, Bottom, Start, _) => "╠",
        (Outward, Bottom, Pos(_), Plain) => "╤",
        (Outward, Bottom, Pos(_), Rounded) => "╤",
        (Outward, Bottom, Pos(_), Double) => "╦",
        (Outward, Bottom, Pos(_), Thick) => "╦",
        (Outward, Bottom, Pos(_), _) => "╦",
        (Outward, Bottom, End, _) => "╣",
        (Outward, Bottom, ProlongEnd, _) => "╩",
        (Outward, Bottom, CrossEnd(_), _) => "╬",

        (Outward, Left, CrossStart(_), _) => "╬",
        (Outward, Left, ProlongStart, _) => "╠",
        (Outward, Left, Start, _) => "╦",
        (Outward, Left, Pos(_), Plain) => "╢",
        (Outward, Left, Pos(_), Rounded) => "╢",
        (Outward, Left, Pos(_), Double) => "╣",
        (Outward, Left, Pos(_), Thick) => "╣",
        (Outward, Left, Pos(_), _) => "╣",
        (Outward, Left, End, _) => "╩",
        (Outward, Left, ProlongEnd, _) => "╠",
        (Outward, Left, CrossEnd(_), _) => "╬",

        // ----------------------------------------------
        (Inward, Top, CrossStart(_), _) => "╔",
        (Inward, Top, ProlongStart, _) => "╔",
        (Inward, Top, Start, _) => "╔",
        (Inward, Top, Pos(_), Plain) => "╤",
        (Inward, Top, Pos(_), Rounded) => "╤",
        (Inward, Top, Pos(_), Double) => "╦",
        (Inward, Top, Pos(_), Thick) => "╦",
        (Inward, Top, Pos(_), _) => "╦",
        (Inward, Top, End, _) => "╗",
        (Inward, Top, ProlongEnd, _) => "╗",
        (Inward, Top, CrossEnd(_), _) => "╗",

        (Inward, Right, CrossStart(_), _) => "╗",
        (Inward, Right, ProlongStart, _) => "╗",
        (Inward, Right, Start, _) => "╗",
        (Inward, Right, Pos(_), Plain) => "╢",
        (Inward, Right, Pos(_), Rounded) => "╢",
        (Inward, Right, Pos(_), Double) => "╣",
        (Inward, Right, Pos(_), Thick) => "╣",
        (Inward, Right, Pos(_), _) => "╣",
        (Inward, Right, End, _) => "╝",
        (Inward, Right, ProlongEnd, _) => "╝",
        (Inward, Right, CrossEnd(_), _) => "╝",

        (Inward, Bottom, CrossStart(_), _) => "╚",
        (Inward, Bottom, ProlongStart, _) => "╚",
        (Inward, Bottom, Start, _) => "╚",
        (Inward, Bottom, Pos(_), Plain) => "╧",
        (Inward, Bottom, Pos(_), Rounded) => "╧",
        (Inward, Bottom, Pos(_), Double) => "╩",
        (Inward, Bottom, Pos(_), Thick) => "╩",
        (Inward, Bottom, Pos(_), _) => "╩",
        (Inward, Bottom, End, _) => "╝",
        (Inward, Bottom, ProlongEnd, _) => "╝",
        (Inward, Bottom, CrossEnd(_), _) => "╝",

        (Inward, Left, CrossStart(_), _) => "╔",
        (Inward, Left, ProlongStart, _) => "╔",
        (Inward, Left, Start, _) => "╔",
        (Inward, Left, Pos(_), Plain) => "╟",
        (Inward, Left, Pos(_), Rounded) => "╟",
        (Inward, Left, Pos(_), Double) => "╠",
        (Inward, Left, Pos(_), Thick) => "╠",
        (Inward, Left, Pos(_), _) => "╠",
        (Inward, Left, End, _) => "╚",
        (Inward, Left, ProlongEnd, _) => "╚",
        (Inward, Left, CrossEnd(_), _) => "╚",

        // ----------------------------------------------
        (Through, Top, CrossStart(_), _) => "╬",
        (Through, Top, ProlongStart, _) => "╔",
        (Through, Top, Start, _) => "╔",
        (Through, Top, Pos(_), Plain) => "╪",
        (Through, Top, Pos(_), Rounded) => "╪",
        (Through, Top, Pos(_), Double) => "╬",
        (Through, Top, Pos(_), Thick) => "╬",
        (Through, Top, Pos(_), _) => "╬",
        (Through, Top, End, _) => "╗",
        (Through, Top, ProlongEnd, _) => "╗",
        (Through, Top, CrossEnd(_), _) => "╬",

        (Through, Right, CrossStart(_), _) => "╬",
        (Through, Right, ProlongStart, _) => "╗",
        (Through, Right, Start, _) => "╗",
        (Through, Right, Pos(_), Plain) => "╫",
        (Through, Right, Pos(_), Rounded) => "╫",
        (Through, Right, Pos(_), Double) => "╬",
        (Through, Right, Pos(_), Thick) => "╬",
        (Through, Right, Pos(_), _) => "╬",
        (Through, Right, End, _) => "╝",
        (Through, Right, ProlongEnd, _) => "╝",
        (Through, Right, CrossEnd(_), _) => "╬",

        (Through, Bottom, CrossStart(_), _) => "╬",
        (Through, Bottom, ProlongStart, _) => "╚",
        (Through, Bottom, Start, _) => "╚",
        (Through, Bottom, Pos(_), Plain) => "╪",
        (Through, Bottom, Pos(_), Rounded) => "╪",
        (Through, Bottom, Pos(_), Double) => "╬",
        (Through, Bottom, Pos(_), Thick) => "╬",
        (Through, Bottom, Pos(_), _) => "╬",
        (Through, Bottom, End, _) => "╝",
        (Through, Bottom, ProlongEnd, _) => "╝",
        (Through, Bottom, CrossEnd(_), _) => "╬",

        (Through, Left, CrossStart(_), _) => "╬",
        (Through, Left, ProlongStart, _) => "╔",
        (Through, Left, Start, _) => "╔",
        (Through, Left, Pos(_), Plain) => "╫",
        (Through, Left, Pos(_), Rounded) => "╫",
        (Through, Left, Pos(_), Double) => "╬",
        (Through, Left, Pos(_), Thick) => "╬",
        (Through, Left, Pos(_), _) => "╬",
        (Through, Left, End, _) => "╚",
        (Through, Left, ProlongEnd, _) => "╚",
        (Through, Left, CrossEnd(_), _) => "╬",

        (Manual(cc), _, _, _) => cc,
    }
}

fn thick_joint(joint: Joint) -> &'static str {
    use BorderType::*;
    use JointKind::*;
    use JointPosition::*;
    use JointSide::*;

    match (joint.kind, joint.side, joint.pos, joint.other_border) {
        (Outward, Top, CrossStart(Thick), Plain) => "╈",
        (Outward, Top, CrossStart(_), Plain) => "\u{2546}",
        (Outward, Top, CrossStart(Thick), Rounded) => "╈",
        (Outward, Top, CrossStart(_), Rounded) => "\u{2546}",
        (Outward, Top, CrossStart(_), Double) => "╋",
        (Outward, Top, CrossStart(Thick), Thick) => "╋",
        (Outward, Top, CrossStart(_), Thick) => "╊",
        (Outward, Top, CrossStart(_), _) => "╋",
        (Outward, Top, ProlongStart, Plain) => "┲",
        (Outward, Top, ProlongStart, Rounded) => "┲",
        (Outward, Top, ProlongStart, Double) => "┳",
        (Outward, Top, ProlongStart, Thick) => "┳",
        (Outward, Top, ProlongStart, _) => "┳",
        (Outward, Top, Start, Plain) => "┢",
        (Outward, Top, Start, Rounded) => "┢",
        (Outward, Top, Start, Double) => "┣",
        (Outward, Top, Start, Thick) => "┣",
        (Outward, Top, Start, _) => "┣",
        (Outward, Top, Pos(_), Plain) => "┷",
        (Outward, Top, Pos(_), Rounded) => "┷",
        (Outward, Top, Pos(_), Double) => "┻",
        (Outward, Top, Pos(_), Thick) => "┻",
        (Outward, Top, Pos(_), _) => "┻",
        (Outward, Top, End, Plain) => "┪",
        (Outward, Top, End, Rounded) => "┪",
        (Outward, Top, End, Double) => "┫",
        (Outward, Top, End, Thick) => "┫",
        (Outward, Top, End, _) => "┫",
        (Outward, Top, ProlongEnd, Plain) => "┱",
        (Outward, Top, ProlongEnd, Rounded) => "┱",
        (Outward, Top, ProlongEnd, Double) => "┳",
        (Outward, Top, ProlongEnd, Thick) => "┳",
        (Outward, Top, ProlongEnd, _) => "┳",
        (Outward, Top, CrossEnd(Thick), Plain) => "╈",
        (Outward, Top, CrossEnd(_), Plain) => "╅",
        (Outward, Top, CrossEnd(Thick), Rounded) => "╈",
        (Outward, Top, CrossEnd(_), Rounded) => "╅",
        (Outward, Top, CrossEnd(_), Double) => "╋",
        (Outward, Top, CrossEnd(Thick), Thick) => "╋",
        (Outward, Top, CrossEnd(_), Thick) => "╉",
        (Outward, Top, CrossEnd(_), _) => "╋",

        (Outward, Right, CrossStart(Thick), Plain) => "╈",
        (Outward, Right, CrossStart(_), Plain) => "╅",
        (Outward, Right, CrossStart(Thick), Rounded) => "╈",
        (Outward, Right, CrossStart(_), Rounded) => "╅",
        (Outward, Right, CrossStart(_), Double) => "╋",
        (Outward, Right, CrossStart(Thick), Thick) => "╋",
        (Outward, Right, CrossStart(_), Thick) => "╊",
        (Outward, Right, CrossStart(_), _) => "╋",
        (Outward, Right, ProlongStart, Plain) => "┪",
        (Outward, Right, ProlongStart, Rounded) => "┪",
        (Outward, Right, ProlongStart, Double) => "┫",
        (Outward, Right, ProlongStart, Thick) => "┫",
        (Outward, Right, ProlongStart, _) => "┫",
        (Outward, Right, Start, Plain) => "┱",
        (Outward, Right, Start, Rounded) => "┱",
        (Outward, Right, Start, Double) => "┳",
        (Outward, Right, Start, Thick) => "┳",
        (Outward, Right, Start, _) => "┳",
        (Outward, Right, Pos(_), Plain) => "┠",
        (Outward, Right, Pos(_), Rounded) => "┠",
        (Outward, Right, Pos(_), Double) => "┣",
        (Outward, Right, Pos(_), Thick) => "┣",
        (Outward, Right, Pos(_), _) => "┣",
        (Outward, Right, End, Plain) => "┹",
        (Outward, Right, End, Rounded) => "┹",
        (Outward, Right, End, Double) => "┻",
        (Outward, Right, End, Thick) => "┻",
        (Outward, Right, End, _) => "┻",
        (Outward, Right, ProlongEnd, Plain) => "┩",
        (Outward, Right, ProlongEnd, Rounded) => "┩",
        (Outward, Right, ProlongEnd, Double) => "┫",
        (Outward, Right, ProlongEnd, Thick) => "┫",
        (Outward, Right, ProlongEnd, _) => "┫",
        (Outward, Right, CrossEnd(Thick), Plain) => "╇",
        (Outward, Right, CrossEnd(_), Plain) => "╃",
        (Outward, Right, CrossEnd(Thick), Rounded) => "╇",
        (Outward, Right, CrossEnd(_), Rounded) => "╃",
        (Outward, Right, CrossEnd(_), Double) => "╋",
        (Outward, Right, CrossEnd(Thick), Thick) => "╋",
        (Outward, Right, CrossEnd(_), Thick) => "╇",
        (Outward, Right, CrossEnd(_), _) => "╋",

        (Outward, Bottom, CrossStart(Thick), Plain) => "╇",
        (Outward, Bottom, CrossStart(_), Plain) => "╄",
        (Outward, Bottom, CrossStart(Thick), Rounded) => "╇",
        (Outward, Bottom, CrossStart(_), Rounded) => "╄",
        (Outward, Bottom, CrossStart(_), Double) => "╋",
        (Outward, Bottom, CrossStart(Thick), Thick) => "╋",
        (Outward, Bottom, CrossStart(_), Thick) => "╊",
        (Outward, Bottom, CrossStart(_), _) => "╋",
        (Outward, Bottom, ProlongStart, Plain) => "┺",
        (Outward, Bottom, ProlongStart, Rounded) => "┺",
        (Outward, Bottom, ProlongStart, Double) => "┻",
        (Outward, Bottom, ProlongStart, Thick) => "┻",
        (Outward, Bottom, ProlongStart, _) => "┻",
        (Outward, Bottom, Start, Plain) => "┡",
        (Outward, Bottom, Start, Rounded) => "┡",
        (Outward, Bottom, Start, Double) => "┣",
        (Outward, Bottom, Start, Thick) => "┣",
        (Outward, Bottom, Start, _) => "┣",
        (Outward, Bottom, Pos(_), Plain) => "┯",
        (Outward, Bottom, Pos(_), Rounded) => "┯",
        (Outward, Bottom, Pos(_), Double) => "┳",
        (Outward, Bottom, Pos(_), Thick) => "┳",
        (Outward, Bottom, Pos(_), _) => "┳",
        (Outward, Bottom, End, Plain) => "┩",
        (Outward, Bottom, End, Rounded) => "┩",
        (Outward, Bottom, End, Double) => "┫",
        (Outward, Bottom, End, Thick) => "┫",
        (Outward, Bottom, End, _) => "┫",
        (Outward, Bottom, ProlongEnd, Plain) => "┹",
        (Outward, Bottom, ProlongEnd, Rounded) => "┹",
        (Outward, Bottom, ProlongEnd, Double) => "┻",
        (Outward, Bottom, ProlongEnd, Thick) => "┻",
        (Outward, Bottom, ProlongEnd, _) => "┻",
        (Outward, Bottom, CrossEnd(Thick), Plain) => "╉",
        (Outward, Bottom, CrossEnd(_), Plain) => "╃",
        (Outward, Bottom, CrossEnd(Thick), Rounded) => "╉",
        (Outward, Bottom, CrossEnd(_), Rounded) => "╃",
        (Outward, Bottom, CrossEnd(_), Double) => "╋",
        (Outward, Bottom, CrossEnd(Thick), Thick) => "╋",
        (Outward, Bottom, CrossEnd(_), Thick) => "╉",
        (Outward, Bottom, CrossEnd(_), _) => "╋",

        (Outward, Left, CrossStart(Thick), Plain) => "╈",
        (Outward, Left, CrossStart(_), Plain) => "\u{2546}",
        (Outward, Left, CrossStart(Thick), Rounded) => "╈",
        (Outward, Left, CrossStart(_), Rounded) => "\u{2546}",
        (Outward, Left, CrossStart(_), Double) => "╋",
        (Outward, Left, CrossStart(Thick), Thick) => "╋",
        (Outward, Left, CrossStart(_), Thick) => "╈",
        (Outward, Left, CrossStart(_), _) => "╋",
        (Outward, Left, ProlongStart, Plain) => "┢",
        (Outward, Left, ProlongStart, Rounded) => "┢",
        (Outward, Left, ProlongStart, Double) => "┣",
        (Outward, Left, ProlongStart, Thick) => "┣",
        (Outward, Left, ProlongStart, _) => "┣",
        (Outward, Left, Start, Plain) => "┲",
        (Outward, Left, Start, Rounded) => "┲",
        (Outward, Left, Start, Double) => "┳",
        (Outward, Left, Start, Thick) => "┳",
        (Outward, Left, Start, _) => "┳",
        (Outward, Left, Pos(_), Plain) => "┨",
        (Outward, Left, Pos(_), Rounded) => "┨",
        (Outward, Left, Pos(_), Double) => "┫",
        (Outward, Left, Pos(_), Thick) => "┫",
        (Outward, Left, Pos(_), _) => "┫",
        (Outward, Left, End, Plain) => "┺",
        (Outward, Left, End, Rounded) => "┺",
        (Outward, Left, End, Double) => "┻",
        (Outward, Left, End, Thick) => "┻",
        (Outward, Left, End, _) => "┻",
        (Outward, Left, ProlongEnd, Plain) => "┡",
        (Outward, Left, ProlongEnd, Rounded) => "┡",
        (Outward, Left, ProlongEnd, Double) => "┣",
        (Outward, Left, ProlongEnd, Thick) => "┣",
        (Outward, Left, ProlongEnd, _) => "┣",
        (Outward, Left, CrossEnd(Thick), Plain) => "╊",
        (Outward, Left, CrossEnd(_), Plain) => "╄",
        (Outward, Left, CrossEnd(Thick), Rounded) => "╊",
        (Outward, Left, CrossEnd(_), Rounded) => "╄",
        (Outward, Left, CrossEnd(_), Double) => "╋",
        (Outward, Left, CrossEnd(Thick), Thick) => "╋",
        (Outward, Left, CrossEnd(_), Thick) => "╇",
        (Outward, Left, CrossEnd(_), _) => "╋",

        // ----------------------------------------------
        (Inward, Top, CrossStart(_), _) => "┏",
        (Inward, Top, ProlongStart, _) => "┏",
        (Inward, Top, Start, _) => "┏",
        (Inward, Top, Pos(_), Plain) => "┯",
        (Inward, Top, Pos(_), Rounded) => "┯",
        (Inward, Top, Pos(_), Double) => "┳",
        (Inward, Top, Pos(_), Thick) => "┳",
        (Inward, Top, Pos(_), _) => "┳",
        (Inward, Top, End, _) => "┓",
        (Inward, Top, ProlongEnd, _) => "┓",
        (Inward, Top, CrossEnd(_), _) => "┓",

        (Inward, Right, CrossStart(_), _) => "┓",
        (Inward, Right, ProlongStart, _) => "┓",
        (Inward, Right, Start, _) => "┓",
        (Inward, Right, Pos(_), Plain) => "┨",
        (Inward, Right, Pos(_), Rounded) => "┨",
        (Inward, Right, Pos(_), Double) => "┫",
        (Inward, Right, Pos(_), Thick) => "┫",
        (Inward, Right, Pos(_), _) => "┫",
        (Inward, Right, End, _) => "┛",
        (Inward, Right, ProlongEnd, _) => "┛",
        (Inward, Right, CrossEnd(_), _) => "┛",

        (Inward, Bottom, CrossStart(_), _) => "┗",
        (Inward, Bottom, ProlongStart, _) => "┗",
        (Inward, Bottom, Start, _) => "┗",
        (Inward, Bottom, Pos(_), Plain) => "┷",
        (Inward, Bottom, Pos(_), Rounded) => "┷",
        (Inward, Bottom, Pos(_), Double) => "┻",
        (Inward, Bottom, Pos(_), Thick) => "┻",
        (Inward, Bottom, Pos(_), _) => "┻",
        (Inward, Bottom, End, _) => "┛",
        (Inward, Bottom, ProlongEnd, _) => "┛",
        (Inward, Bottom, CrossEnd(_), _) => "┛",

        (Inward, Left, CrossStart(_), _) => "┏",
        (Inward, Left, ProlongStart, _) => "┏",
        (Inward, Left, Start, _) => "┏",
        (Inward, Left, Pos(_), Plain) => "┠",
        (Inward, Left, Pos(_), Rounded) => "┠",
        (Inward, Left, Pos(_), Double) => "┣",
        (Inward, Left, Pos(_), Thick) => "┣",
        (Inward, Left, Pos(_), _) => "┣",
        (Inward, Left, End, _) => "┗",
        (Inward, Left, ProlongEnd, _) => "┗",
        (Inward, Left, CrossEnd(_), _) => "┗",

        // ----------------------------------------------
        (Through, Top, CrossStart(_), _) => "┏",
        (Through, Top, ProlongStart, Plain) => "┏",
        (Through, Top, ProlongStart, Rounded) => "┏",
        (Through, Top, ProlongStart, Double) => "┏",
        (Through, Top, ProlongStart, Thick) => "┏",
        (Through, Top, ProlongStart, _) => "┏",
        (Through, Top, Start, Plain) => "┏",
        (Through, Top, Start, Rounded) => "┏",
        (Through, Top, Start, Double) => "┏",
        (Through, Top, Start, Thick) => "┏",
        (Through, Top, Start, _) => "┏",
        (Through, Top, Pos(_), Plain) => "┿",
        (Through, Top, Pos(_), Rounded) => "┿",
        (Through, Top, Pos(_), Double) => "╋",
        (Through, Top, Pos(_), Thick) => "╋",
        (Through, Top, Pos(_), _) => "╋",
        (Through, Top, End, Plain) => "┓",
        (Through, Top, End, Rounded) => "┓",
        (Through, Top, End, Double) => "┓",
        (Through, Top, End, Thick) => "┓",
        (Through, Top, End, _) => "┓",
        (Through, Top, ProlongEnd, Plain) => "┓",
        (Through, Top, ProlongEnd, Rounded) => "┓",
        (Through, Top, ProlongEnd, Double) => "┓",
        (Through, Top, ProlongEnd, Thick) => "┓",
        (Through, Top, ProlongEnd, _) => "┓",
        (Through, Top, CrossEnd(_), _) => "X",

        (Through, Right, CrossStart(_), _) => "X",
        (Through, Right, ProlongStart, Plain) => "┓",
        (Through, Right, ProlongStart, Rounded) => "┓",
        (Through, Right, ProlongStart, Double) => "┓",
        (Through, Right, ProlongStart, Thick) => "┓",
        (Through, Right, ProlongStart, _) => "┓",
        (Through, Right, Start, Plain) => "┓",
        (Through, Right, Start, Rounded) => "┓",
        (Through, Right, Start, Double) => "┓",
        (Through, Right, Start, Thick) => "┓",
        (Through, Right, Start, _) => "┓",
        (Through, Right, Pos(_), Plain) => "╂",
        (Through, Right, Pos(_), Rounded) => "╂",
        (Through, Right, Pos(_), Double) => "╋",
        (Through, Right, Pos(_), Thick) => "╋",
        (Through, Right, Pos(_), _) => "╋",
        (Through, Right, End, Plain) => "┛",
        (Through, Right, End, Rounded) => "┛",
        (Through, Right, End, Double) => "┛",
        (Through, Right, End, Thick) => "┛",
        (Through, Right, End, _) => "┛",
        (Through, Right, ProlongEnd, Plain) => "┛",
        (Through, Right, ProlongEnd, Rounded) => "┛",
        (Through, Right, ProlongEnd, Double) => "┛",
        (Through, Right, ProlongEnd, Thick) => "┛",
        (Through, Right, ProlongEnd, _) => "┛",
        (Through, Right, CrossEnd(_), _) => "X",

        (Through, Bottom, CrossStart(_), _) => "X",
        (Through, Bottom, ProlongStart, Plain) => "┗",
        (Through, Bottom, ProlongStart, Rounded) => "┗",
        (Through, Bottom, ProlongStart, Double) => "┗",
        (Through, Bottom, ProlongStart, Thick) => "┗",
        (Through, Bottom, ProlongStart, _) => "┗",
        (Through, Bottom, Start, Plain) => "┗",
        (Through, Bottom, Start, Rounded) => "┗",
        (Through, Bottom, Start, Double) => "┗",
        (Through, Bottom, Start, Thick) => "┗",
        (Through, Bottom, Start, _) => "┗",
        (Through, Bottom, Pos(_), Plain) => "┿",
        (Through, Bottom, Pos(_), Rounded) => "┿",
        (Through, Bottom, Pos(_), Double) => "╋",
        (Through, Bottom, Pos(_), Thick) => "╋",
        (Through, Bottom, Pos(_), _) => "╋",
        (Through, Bottom, End, Plain) => "┛",
        (Through, Bottom, End, Rounded) => "┛",
        (Through, Bottom, End, Double) => "┛",
        (Through, Bottom, End, Thick) => "┛",
        (Through, Bottom, End, _) => "┛",
        (Through, Bottom, ProlongEnd, Plain) => "┛",
        (Through, Bottom, ProlongEnd, Rounded) => "┛",
        (Through, Bottom, ProlongEnd, Double) => "┛",
        (Through, Bottom, ProlongEnd, Thick) => "┛",
        (Through, Bottom, ProlongEnd, _) => "┛",
        (Through, Bottom, CrossEnd(_), _) => "X",

        (Through, Left, CrossStart(_), _) => "X",
        (Through, Left, ProlongStart, Plain) => "┏",
        (Through, Left, ProlongStart, Rounded) => "┏",
        (Through, Left, ProlongStart, Double) => "┏",
        (Through, Left, ProlongStart, Thick) => "┏",
        (Through, Left, ProlongStart, _) => "┏",
        (Through, Left, Start, Plain) => "┏",
        (Through, Left, Start, Rounded) => "┏",
        (Through, Left, Start, Double) => "┏",
        (Through, Left, Start, Thick) => "┏",
        (Through, Left, Start, _) => "┏",
        (Through, Left, Pos(_), Plain) => "╂",
        (Through, Left, Pos(_), Rounded) => "╂",
        (Through, Left, Pos(_), Double) => "╋",
        (Through, Left, Pos(_), Thick) => "╋",
        (Through, Left, Pos(_), _) => "╋",
        (Through, Left, End, Plain) => "┗",
        (Through, Left, End, Rounded) => "┗",
        (Through, Left, End, Double) => "┗",
        (Through, Left, End, Thick) => "┗",
        (Through, Left, End, _) => "┗",
        (Through, Left, ProlongEnd, Plain) => "┗",
        (Through, Left, ProlongEnd, Rounded) => "┗",
        (Through, Left, ProlongEnd, Double) => "┗",
        (Through, Left, ProlongEnd, Thick) => "┗",
        (Through, Left, ProlongEnd, _) => "┗",
        (Through, Left, CrossEnd(_), _) => "X",

        (Manual(cc), _, _, _) => cc,
    }
}

fn quadrant_inside_joint(joint: Joint) -> &'static str {
    use BorderType::*;
    use JointKind::*;
    use JointPosition::*;
    use JointSide::*;

    match (
        joint.kind,
        joint.side,
        joint.pos,
        joint.mirrored,
        joint.other_border,
    ) {
        (Outward, Top, CrossStart(_), _, QuadrantInside) => "▚",
        (Outward, Top, CrossStart(_), _, QuadrantOutside) => "▟",
        (Outward, Top, CrossStart(_), _, _) => "▚",
        (Outward, Top, ProlongStart, _, QuadrantInside) => "▜",
        (Outward, Top, ProlongStart, _, _) => "▄",
        (Outward, Top, Start, false, QuadrantOutside) => "▙",
        (Outward, Top, Start, _, _) => "▐",
        (Outward, Top, Pos(_), false, QuadrantInside) => "▟",
        (Outward, Top, Pos(_), true, QuadrantInside) => "▙",
        (Outward, Top, Pos(_), false, _) => "▙",
        (Outward, Top, Pos(_), true, _) => "▟",
        (Outward, Top, End, true, QuadrantOutside) => "▟",
        (Outward, Top, End, _, _) => "▌",
        (Outward, Top, ProlongEnd, _, QuadrantInside) => "▛",
        (Outward, Top, ProlongEnd, _, _) => "▄",
        (Outward, Top, CrossEnd(_), _, QuadrantInside) => "▞",
        (Outward, Top, CrossEnd(_), _, QuadrantOutside) => "▙",
        (Outward, Top, CrossEnd(_), _, _) => "▞",

        (Outward, Right, CrossStart(_), _, _) => "▞",
        (Outward, Right, ProlongStart, _, QuadrantInside) => "▟",
        (Outward, Right, ProlongStart, _, _) => "▌",
        (Outward, Right, Start, _, _) => "▄",
        (Outward, Right, Pos(_), false, QuadrantInside) => "▙",
        (Outward, Right, Pos(_), true, QuadrantInside) => "▛",
        (Outward, Right, Pos(_), false, _) => "▛",
        (Outward, Right, Pos(_), true, _) => "▙",
        (Outward, Right, End, _, _) => "▀",
        (Outward, Right, ProlongEnd, _, QuadrantInside) => "▜",
        (Outward, Right, ProlongEnd, _, _) => "▌",
        (Outward, Right, CrossEnd(_), _, _) => "▚",

        (Outward, Bottom, CrossStart(_), _, _) => "▞",
        (Outward, Bottom, ProlongStart, _, QuadrantInside) => "▟",
        (Outward, Bottom, ProlongStart, _, _) => "▀",
        (Outward, Bottom, Start, _, _) => "▐",
        (Outward, Bottom, Pos(_), false, QuadrantInside) => "▜",
        (Outward, Bottom, Pos(_), true, QuadrantInside) => "▛",
        (Outward, Bottom, Pos(_), false, _) => "▛",
        (Outward, Bottom, Pos(_), true, _) => "▜",
        (Outward, Bottom, End, _, _) => "▌",
        (Outward, Bottom, ProlongEnd, _, QuadrantInside) => "▙",
        (Outward, Bottom, ProlongEnd, _, _) => "▀",
        (Outward, Bottom, CrossEnd(_), _, _) => "▚",

        (Outward, Left, CrossStart(_), _, _) => "▚",
        (Outward, Left, ProlongStart, _, QuadrantInside) => "▙",
        (Outward, Left, ProlongStart, _, _) => "▐",
        (Outward, Left, Start, _, _) => "▄",
        (Outward, Left, Pos(_), false, QuadrantInside) => "▟",
        (Outward, Left, Pos(_), true, QuadrantInside) => "▜",
        (Outward, Left, Pos(_), false, _) => "▜",
        (Outward, Left, Pos(_), true, _) => "▟",
        (Outward, Left, End, _, _) => "▀",
        (Outward, Left, ProlongEnd, _, QuadrantInside) => "▛",
        (Outward, Left, ProlongEnd, _, _) => "▐",
        (Outward, Left, CrossEnd(_), _, _) => "▞",

        // ----------------------------------------------
        (Inward, Top, CrossStart(_), _, _) => "X",
        (Inward, Top, ProlongStart, _, _) => "┌",
        (Inward, Top, Start, _, _) => "┌",
        (Inward, Top, Pos(_), _, _) => "┬",
        (Inward, Top, End, _, _) => "┐",
        (Inward, Top, ProlongEnd, _, _) => "┐",
        (Inward, Top, CrossEnd(_), _, _) => "X",

        (Inward, Right, CrossStart(_), _, _) => "X",
        (Inward, Right, ProlongStart, _, _) => "┐",
        (Inward, Right, Start, _, _) => "┐",
        (Inward, Right, Pos(_), _, _) => "┤",
        (Inward, Right, End, _, _) => "┘",
        (Inward, Right, ProlongEnd, _, _) => "┘",
        (Inward, Right, CrossEnd(_), _, _) => "X",

        (Inward, Bottom, CrossStart(_), _, _) => "X",
        (Inward, Bottom, ProlongStart, _, _) => "└",
        (Inward, Bottom, Start, _, _) => "└",
        (Inward, Bottom, Pos(_), _, _) => "┴",
        (Inward, Bottom, End, _, _) => "┘",
        (Inward, Bottom, ProlongEnd, _, _) => "┘",
        (Inward, Bottom, CrossEnd(_), _, _) => "X",

        (Inward, Left, CrossStart(_), _, _) => "X",
        (Inward, Left, ProlongStart, _, _) => "┌",
        (Inward, Left, Start, _, _) => "┌",
        (Inward, Left, Pos(_), _, _) => "├",
        (Inward, Left, End, _, _) => "└",
        (Inward, Left, ProlongEnd, _, _) => "└",
        (Inward, Left, CrossEnd(_), _, _) => "X",

        // ----------------------------------------------
        (Through, Top, CrossStart(_), _, _) => "X",
        (Through, Top, ProlongStart, _, _) => "┌",
        (Through, Top, Start, _, _) => "┌",
        (Through, Top, Pos(_), _, _) => "┼",
        (Through, Top, End, _, _) => "┐",
        (Through, Top, ProlongEnd, _, _) => "┐",
        (Through, Top, CrossEnd(_), _, _) => "X",

        (Through, Right, CrossStart(_), _, _) => "X",
        (Through, Right, ProlongStart, _, _) => "┐",
        (Through, Right, Start, _, _) => "┐",
        (Through, Right, Pos(_), _, _) => "┼",
        (Through, Right, End, _, _) => "┘",
        (Through, Right, ProlongEnd, _, _) => "┘",
        (Through, Right, CrossEnd(_), _, _) => "X",

        (Through, Bottom, CrossStart(_), _, _) => "X",
        (Through, Bottom, ProlongStart, _, _) => "└",
        (Through, Bottom, Start, _, _) => "└",
        (Through, Bottom, Pos(_), _, _) => "┼",
        (Through, Bottom, End, _, _) => "┘",
        (Through, Bottom, ProlongEnd, _, _) => "┘",
        (Through, Bottom, CrossEnd(_), _, _) => "X",

        (Through, Left, CrossStart(_), _, _) => "X",
        (Through, Left, ProlongStart, _, _) => "┌",
        (Through, Left, Start, _, _) => "┌",
        (Through, Left, Pos(_), _, _) => "┼",
        (Through, Left, End, _, _) => "└",
        (Through, Left, ProlongEnd, _, _) => "└",
        (Through, Left, CrossEnd(_), _, _) => "X",

        (Manual(cc), _, _, _, _) => cc,
    }
}
