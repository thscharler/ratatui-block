use crate::v3::{BorderSymbol, Kind, Side};
use ratatui::widgets::BorderType;

pub fn plain_symbol(glyph: BorderSymbol) -> &'static str {
    use BorderType::*;
    use Kind::*;
    use Side::*;

    match (glyph.side, glyph.kind, glyph.other_border) {
        (Top, RegularStart, _) => "┌",
        (Top, AngleStartStart | AngleStartEnd, Thick) => "┞",
        (Top, AngleStartStart | AngleStartEnd, _) => "├",
        (Top, ProlongStart, Thick) => "┭",
        (Top, ProlongStart, _) => "┬",
        (Top, CrossStart(Thick), Thick) => "╃",
        (Top, CrossStart(_), Thick) => "╀",
        (Top, CrossStart(Thick), _) => "┽",
        (Top, CrossStart(_), _) => "┼",
        (Top, Regular, _) => "─",
        (Top, AngleOutwardStart | AngleOutwardEnd, Thick) => "┸",
        (Top, AngleOutwardStart | AngleOutwardEnd, Double) => "╨",
        (Top, AngleOutwardStart | AngleOutwardEnd, _) => "┴",
        (Top, AngleInwardStart | AngleInwardEnd, Thick) => "┰",
        (Top, AngleInwardStart | AngleInwardEnd, Double) => "╥",
        (Top, AngleInwardStart | AngleInwardEnd, _) => "┬",
        (Top, Cross(Thick), Thick) => "╂",
        (Top, Cross(Thick), _) => "╁",
        (Top, Cross(_), Thick) => "╀",
        (Top, Cross(Double), Double) => "╫",
        (Top, Cross(_), _) => "┼",
        (Top, Overlap, _) => "─",
        (Top, RegularEnd, _) => "┐",
        (Top, AngleEndStart | AngleEndEnd, Thick) => "┦",
        (Top, AngleEndStart | AngleEndEnd, _) => "┤",
        (Top, ProlongEnd, Thick) => "┮",
        (Top, ProlongEnd, _) => "┬",
        (Top, CrossEnd(Thick), Thick) => "╄",
        (Top, CrossEnd(_), Thick) => "╀",
        (Top, CrossEnd(Thick), _) => "┾",
        (Top, CrossEnd(_), _) => "┼",

        (Right, RegularStart, _) => "┐",
        (Right, AngleStartStart | AngleStartEnd, Thick) => "┮",
        (Right, AngleStartStart | AngleStartEnd, _) => "┬",
        (Right, ProlongStart, Thick) => "┦",
        (Right, ProlongStart, _) => "┤",
        (Right, CrossStart(Thick), Thick) => "╄",
        (Right, CrossStart(_), Thick) => "┾",
        (Right, CrossStart(Thick), _) => "╀",
        (Right, CrossStart(_), _) => "┼",
        (Right, Regular, _) => "│",
        (Right, AngleOutwardStart | AngleOutwardEnd, Thick) => "┝",
        (Right, AngleOutwardStart | AngleOutwardEnd, Double) => "╞",
        (Right, AngleOutwardStart | AngleOutwardEnd, _) => "├",
        (Right, AngleInwardStart | AngleInwardEnd, Thick) => "┥",
        (Right, AngleInwardStart | AngleInwardEnd, Double) => "╡",
        (Right, AngleInwardStart | AngleInwardEnd, _) => "┤",
        (Right, Cross(Thick), Thick) => "┿",
        (Right, Cross(Thick), _) => "┽",
        (Right, Cross(_), Thick) => "┾",
        (Right, Cross(Double), Double) => "╪",
        (Right, Cross(_), _) => "┼",
        (Right, Overlap, _) => "│",
        (Right, RegularEnd, _) => "┘",
        (Right, AngleEndStart | AngleEndEnd, Thick) => "┶",
        (Right, AngleEndStart | AngleEndEnd, _) => "┴",
        (Right, ProlongEnd, Thick) => "┧",
        (Right, ProlongEnd, _) => "┤",
        (Right, CrossEnd(Thick), Thick) => "╆",
        (Right, CrossEnd(_), Thick) => "┾",
        (Right, CrossEnd(Thick), _) => "╁",
        (Right, CrossEnd(_), _) => "┼",

        (Bottom, RegularStart, _) => "└",
        (Bottom, AngleStartStart | AngleStartEnd, Thick) => "┟",
        (Bottom, AngleStartStart | AngleStartEnd, _) => "├",
        (Bottom, ProlongStart, Thick) => "┵",
        (Bottom, ProlongStart, _) => "┴",
        (Bottom, CrossStart(Thick), Thick) => "╅",
        (Bottom, CrossStart(_), Thick) => "╁",
        (Bottom, CrossStart(Thick), _) => "┽",
        (Bottom, CrossStart(_), _) => "┼",
        (Bottom, Regular, _) => "─",
        (Bottom, AngleOutwardStart | AngleOutwardEnd, Thick) => "┰",
        (Bottom, AngleOutwardStart | AngleOutwardEnd, Double) => "╥",
        (Bottom, AngleOutwardStart | AngleOutwardEnd, _) => "┬",
        (Bottom, AngleInwardStart | AngleInwardEnd, Thick) => "┸",
        (Bottom, AngleInwardStart | AngleInwardEnd, Double) => "╨",
        (Bottom, AngleInwardStart | AngleInwardEnd, _) => "┴",
        (Bottom, Cross(Thick), Thick) => "╂",
        (Bottom, Cross(Thick), _) => "╀",
        (Bottom, Cross(_), Thick) => "╁",
        (Bottom, Cross(Double), Double) => "╫",
        (Bottom, Cross(_), _) => "┼",
        (Bottom, Overlap, _) => "─",
        (Bottom, RegularEnd, _) => "┘",
        (Bottom, AngleEndStart | AngleEndEnd, Thick) => "┧",
        (Bottom, AngleEndStart | AngleEndEnd, _) => "┤",
        (Bottom, ProlongEnd, Thick) => "┶",
        (Bottom, ProlongEnd, _) => "┴",
        (Bottom, CrossEnd(Thick), Thick) => "╆",
        (Bottom, CrossEnd(_), Thick) => "╁",
        (Bottom, CrossEnd(Thick), _) => "┾",
        (Bottom, CrossEnd(_), _) => "┼",

        (Left, RegularStart, _) => "┌",
        (Left, AngleStartStart | AngleStartEnd, Thick) => "┭",
        (Left, AngleStartStart | AngleStartEnd, _) => "┬",
        (Left, ProlongStart, Thick) => "┞",
        (Left, ProlongStart, _) => "├",
        (Left, CrossStart(Thick), Thick) => "╃",
        (Left, CrossStart(_), Thick) => "┽",
        (Left, CrossStart(Thick), _) => "╀",
        (Left, CrossStart(_), _) => "┼",
        (Left, Regular, _) => "│",
        (Left, AngleOutwardStart | AngleOutwardEnd, Thick) => "┥",
        (Left, AngleOutwardStart | AngleOutwardEnd, Double) => "╡",
        (Left, AngleOutwardStart | AngleOutwardEnd, _) => "┤",
        (Left, AngleInwardStart | AngleInwardEnd, Thick) => "┝",
        (Left, AngleInwardStart | AngleInwardEnd, Double) => "╞",
        (Left, AngleInwardStart | AngleInwardEnd, _) => "├",
        (Left, Cross(Thick), Thick) => "┿",
        (Left, Cross(Thick), _) => "┾",
        (Left, Cross(_), Thick) => "┽",
        (Left, Cross(Double), Double) => "╪",
        (Left, Cross(_), _) => "┼",
        (Left, Overlap, _) => "│",
        (Left, RegularEnd, _) => "└",
        (Left, AngleEndStart | AngleEndEnd, Thick) => "┵",
        (Left, AngleEndStart | AngleEndEnd, _) => "┴",
        (Left, ProlongEnd, Thick) => "┟",
        (Left, ProlongEnd, _) => "├",
        (Left, CrossEnd(Thick), Thick) => "╅",
        (Left, CrossEnd(_), Thick) => "┽",
        (Left, CrossEnd(Thick), _) => "╁",
        (Left, CrossEnd(_), _) => "┼",
    }
}
